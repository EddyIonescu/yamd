/** @jsx React.DOM */

var buttonStyle = {
  backgroundColor: '#cccccc',
  margin: 5,
  padding: 5,
  borderRadius: 5,
  width: 120
};

var Cell = React.createClass({
  shouldShowNumber: function () {
    if (this.props.showNumber === false) return false;
    if (this.props.showNumber === true) return true;
    return parseInt(this.props.contents, 2);
  },
  render: function () {
    return <pre style={{margin: 0}}>{this.props.label}:{this.props.contents} {
      this.shouldShowNumber() ? `(${parseInt(this.props.contents, 2)})` : null
    }</pre>
  }
});

var StateView = React.createClass({
  render: function () {

    var self = this;

    var registerView = <div style={{marginTop: 30}}>
      <Cell label="PC" contents={this.props.state.PC} showNumber={true} />

      {this.props.state.registers.map(function (contents, num) {
        return <Cell label={pad(num.toString(), 2, "0")} contents={contents} />
      })}

      <Cell label="LO" contents={this.props.state.LO} />
      <Cell label="HI" contents={this.props.state.HI} />
    </div>

    var MEMORY_MIDDLE = 16777208 / 2;

    var lowMemoryAddresses = Object.keys(this.props.state.memory).filter(function (address) {
      return (parseInt(address) <= MEMORY_MIDDLE / 2);
    });
    var highMemoryAddresses = Object.keys(this.props.state.memory).filter(function (address) {
      return (parseInt(address) > MEMORY_MIDDLE / 2);
    });

    var lowMemoryView = <div style={{marginTop: 30, width: 450}}>
      {lowMemoryAddresses.map(function (address) {
        return <Cell label={pad(address, 8, " ")} contents={self.props.state.memory[address]} showNumber={false} />
      })}
    </div>

    var highMemoryView = <div style={{marginTop: 30, width: 450}}>
      {highMemoryAddresses.map(function (address) {
        return <Cell label={pad(address, 8, " ")} contents={self.props.state.memory[address]} />
      })}
    </div>

    return <div style={{
      display: 'flex',
      flexDirection: 'row'
    }}>

      {registerView}
      {highMemoryView}
      {lowMemoryView}

    </div>
  }
});

var TraceViewer = React.createClass({
  getInitialState: function () {
    return {
      selectedTraceId: 0
    };
  },
  handleStepForward: function () {
    this.setState({
      selectedTraceId: this.state.selectedTraceId + 1,
    });
  },
  handleStepBackward: function () {
    this.setState({
      selectedTraceId: this.state.selectedTraceId - 1,
    });
  },
  render: function () {
    var selectedTrace = this.props.trace[this.state.selectedTraceId];
    return <div>
      <h3>Step {this.state.selectedTraceId}</h3>
      <button style={buttonStyle} onClick={this.handleStepBackward}>step backward</button>
      <button style={buttonStyle} onClick={this.handleStepForward}>step forward</button>
      {
        selectedTrace ? <StateView state={selectedTrace} /> : <div />
      }
    </div>
  }
});


var App = React.createClass({
  getInitialState: function () {
    return {
      trace: [],
      programLoaded: false,
    };
  },
  handleClickLoad: function () {

    node = $(React.findDOMNode(this)).find('#mcInput');
    var instructionString = node.val();

    this.setState({
      trace: executeInstructionString(instructionString),
      programLoaded: true
    });

  },
  render: function() {
    return (
      <div>

        <pre style={{'whiteSpace': "pre"}}>
        Instructions: copy and paste some machine code into the box below and then click load (there is already some sample code in there)
        </pre>

        <input id="mcInput" value="00000000000000001110000000010100, 00000000010000000000000000000000, 00000000000000000010000000010100, 00000000000000000000000000001000, 00000011110001001111000000100010, 00000011110000000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000001000, 10101100110001000000000000000000, 00000000000001100010100000100000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000011100, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000011100, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10101100110000000000000000010000, 10101100110000000000000000010100, 10101100110000000000000000011000, 10101100110111010000000000001000, 00000000000001101110100000100000, 10101111101111110000000000011000, 10101111101001010000000000001100, 00000000001000000001100000100000, 10101111101000110000000000010100, 00000000010000000001100000100000, 10101111101000110000000000010000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000010000, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000010000, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10001111101001000000000000010100, 10101100110001000000000000001000, 10001111101001000000000000010000, 10101100110001000000000000001100, 00000000000000000100000000010100, 00000000000000000000000011000100, 00000001000000000000000000001001, 10001111101111110000000000011000, 10001111101111010000000000001000, 00000011111000000000000000001000, 00000000000001100010100000100000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10101100110000000000000000010000, 10101100110000000000000000010100, 10101100110111010000000000001000, 00000000000001101110100000100000, 10101111101111110000000000010100, 10101111101001010000000000001100, 00000000000111010001100000100000, 10101111101000110000000000010000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 10101100110001000000000000000000, 10101100110000000000000000001000, 10001111101001000000000000010000, 10101100110001000000000000001000, 00000000000000000100000000010100, 00000000000000000000000111010100, 00000001000000000000000000001001, 10001111101111110000000000010100, 10001111101111010000000000001000, 00000011111000000000000000001000, 00000000000001100010100000100000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10101100110000000000000000010000, 10101100110000000000000000010100, 10101100110111010000000000001000, 00000000000001101110100000100000, 10101111101111110000000000010100, 10101111101001010000000000001100, 00000000000111010001100000100000, 10101111101000110000000000010000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 10101100110001000000000000000000, 10101100110000000000000000001000, 10001111101001000000000000010000, 10101100110001000000000000001000, 00000000000000000100000000010100, 00000000000000000000001001100000, 00000001000000000000000000001001, 10001111101111110000000000010100, 10001111101111010000000000001000, 00000011111000000000000000001000, 00000000000001100010100000100000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000011000, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10101100110000000000000000010000, 10101100110000000000000000010100, 10101100110111010000000000001000, 00000000000001101110100000100000, 10101111101111110000000000010100, 10101111101001010000000000001100, 10001111101001000000000000001100, 10001100100000110000000000001000, 10101111101000110000000000010000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000001100, 10101100110001000000000000000000, 10101100110000000000000000001000, 10001111101001000000000000010000, 10101100110001000000000000001000, 00000000000000000100000000010100, 00000000000000000000000101001100, 00000001000000000000000000001001, 10001111101111110000000000010100, 10001111101111010000000000001000, 00000011111000000000000000001000, 00000000000001100010100000100000, 00000000000111000011000000100000, 00000000000000000010000000010100, 00000000000000000000000000010100, 00000011100001001110000000100000, 00000000000000000010000000010100, 00000000000000000000000000010100, 10101100110001000000000000000000, 10101100110000000000000000001000, 10101100110000000000000000001100, 10101100110000000000000000010000, 10101100110111010000000000001000, 00000000000001101110100000100000, 10101111101111110000000000010000, 10101111101001010000000000001100, 00000000000111010010000000100000, 10001100100001000000000000001100, 10001100100001000000000000001000, 10001100100001000000000000001100, 10001100100001000000000000001000, 10001100100001000000000000001100, 10001100100000110000000000001000, 10001111101111110000000000010000, 10001111101111010000000000001000, 00000011111000000000000000001000
"></input>
        <button style={buttonStyle} onClick={this.handleClickLoad}>load</button>

        {
          this.state.programLoaded
            ? <TraceViewer trace={this.state.trace} />
            : null
        }


      </div>
    );
  }
});

React.render(<App />, document.body);