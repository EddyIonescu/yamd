/** @jsx React.DOM */

var buttonStyle = {
  backgroundColor: '#cccccc',
  margin: 5,
  padding: 5,
  borderRadius: 5,
  width: 120
};

var StateView = React.createClass({
  render: function () {

    var registerView = "";
    registerView += `\nPC: ${this.props.state.PC} (${parseInt(this.props.state.PC, 2)})`;
    this.props.state.registers.forEach(function (contents, num) {
      registerView += `\n${zeroPad(num, 2, 10)}: ${contents}`;
      if (parseInt(contents, 2) !== 0) {
        registerView += ` (${parseInt(contents, 2)})`;
      }
    });
    registerView += `\nLO: ${this.props.state.LO}`;
    registerView += `\nHI: ${this.props.state.HI}`;

    var MEMORY_MIDDLE = 16777208 / 2;

    var self = this;

    var lowMemoryView = "";
    var highMemoryView = "";

    Object.keys(this.props.state.memory).forEach(function (address) {
      var contents = self.props.state.memory[address];
      if (parseInt(address) > MEMORY_MIDDLE / 2) {
        lowMemoryView += `\n${spacePad(address, 8, 10)}:${contents}`;
      } else {
        highMemoryView += `\n${spacePad(address, 8, 10)}:${contents}`;
      }
    });

    return <div style={{
      display: 'flex',
      flexDirection: 'row'
    }}>

      <pre style={{
        width: 305,
        marginRight: 100
      }}>
        {registerView}
      </pre>

      <pre style={{
        marginRight: 50,
        width: 325
      }}>
        {lowMemoryView}
      </pre>

      <pre style={{
        marginRight: 100,
        width: 300
      }}>
        {highMemoryView}
      </pre>

    </div>
  }
});

var TraceViewer = React.createClass({
  getInitialState: function () {
    return {
      selectedTraceId: 0
    };
  },
  handleStepForward: function () {
    this.setState({
      selectedTraceId: this.state.selectedTraceId + 1,
    });
  },
  handleStepBackward: function () {
    this.setState({
      selectedTraceId: this.state.selectedTraceId - 1,
    });
  },
  render: function () {
    var selectedTrace = this.props.trace[this.state.selectedTraceId];
    return <div>
      <h3>Step {this.state.selectedTraceId}</h3>
      <button style={buttonStyle} onClick={this.handleStepBackward}>step backward</button>
      <button style={buttonStyle} onClick={this.handleStepForward}>step forward</button>
      {
        selectedTrace ? <StateView state={selectedTrace} /> : <div />
      }
    </div>
  }
});


var App = React.createClass({
  getInitialState: function () {
    return {
      trace: [],
    };
  },
  handleClickLoad: function () {

    node = $(React.findDOMNode(this)).find('#mcInput');
    var instructionString = node.val();

    this.setState({
      trace: executeInstructionString(instructionString),
    });

  },
  render: function() {
    return (
      <div>

        <pre style={{'white-space': "pre"}}>
        Instructions: copy and paste some machine code into the box below and then click load (there is already some sample code in there)
        </pre>

        <input id="mcInput" value
"></input>

        <button style={buttonStyle} onClick={this.handleClickLoad}>load</button>
        <TraceViewer trace={this.state.trace} />
      </div>
    );
  }
});

React.render(<App />, document.body);